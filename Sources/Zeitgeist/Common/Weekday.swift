import Foundation

public class Weekday: NSObject, Identifiable, NSSecureCoding, NSCopying, Codable {
  public let id: Int /// The `Weekday.id`'s are the numbers 1-N (where for the Gregorian calendar N=7 and 1 is Sunday).
  public let symbol: String?
  
  public init(id: Int, symbol: String? = nil) {
    self.id = id
    self.symbol = symbol
  }
  
  /// The index of the weekday within an array of `weekdays`for a whole week.
  var index: Int {
    id - 1
  }
  
  // MARK: - Coding
  enum CodingKeys: String, CodingKey {
    case id = "id"
    case symbol = "symbol"
  }
  
  public required init?(coder aDecoder: NSCoder) {
    self.id = aDecoder.decodeInteger(forKey: CodingKeys.id.rawValue)
    self.symbol = aDecoder.decodeObject(of: NSString.self, forKey: CodingKeys.symbol.rawValue) as String?
  }
  
  public func encode(with aCoder: NSCoder) {
    aCoder.encode(id, forKey: CodingKeys.id.rawValue)
    aCoder.encode(symbol, forKey: CodingKeys.symbol.rawValue)
  }
  
  public static var supportsSecureCoding: Bool {
    return true
  }
  
  public required init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: CodingKeys.self)
    id = try values.decode(Int.self, forKey: .id)
    symbol = try values.decodeIfPresent(String.self, forKey: .symbol)
  }
  
  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(id, forKey: .id)
    try container.encodeIfPresent(symbol, forKey: .symbol)
  }
  
  // MARK: - Copying
  public func copy(with zone: NSZone? = nil) -> Any {
    Weekday(id: id, symbol: symbol)
  }
}

// MARK: - Equal & Description
extension Weekday {
  public override func isEqual(_ object: Any?) -> Bool {
    guard let other = object as? Weekday else {
      return false
    }
    return id == other.id
  }

  public override var hash: Int {
    var hasher = Hasher()
    hasher.combine(id)
    return hasher.finalize()
  }
  
  public override var description: String {
    "Weekday(id: \(id), symbol: '\(symbol ?? "")')"
  }
}

// MARK: - Convenience methods
/// These only apply to the `Gregorian` calendar where the weekday units are the numbers 1-7 and 1 is Sunday.
extension Weekday {
  public static let sunday = Weekday(id: 1)
  public static let monday = Weekday(id: 2)
  public static let tuesday = Weekday(id: 3)
  public static let wednesday = Weekday(id: 4)
  public static let thursday = Weekday(id: 5)
  public static let friday = Weekday(id: 6)
  public static let saturday = Weekday(id: 7)
  
  public static var all: [Weekday] {
    return [.sunday, .monday, .tuesday, .wednesday, .thursday, .friday, .saturday]
  }
  
  /// Might only be true in some countries like in the EU or USA.
  static var workweek: [Weekday] {
    return [.monday, .tuesday, .wednesday, .thursday, .friday]
  }
}

extension Calendar {
  public func weekday(for date: Date) -> Weekday? {
    guard let id = weekdayID(for: date) else { return nil }
    return Weekday(id: id)
  }
  
  public var weekdays: [Weekday] {
    return sorted(weekdaySymbols: standaloneWeekdaySymbols)
  }
  
  public var veryShortWeekdays: [Weekday] {
    return sorted(weekdaySymbols: veryShortStandaloneWeekdaySymbols)
  }
  
  /// Sorting `weekdaySymbols` based on the `firstWeekday`.
  /// - Parameter symbols: The different `weekdaySymbols` generated by `Calendar`
  /// - Returns: A sorted list of `Weekday`'s.
  private func sorted(weekdaySymbols symbols: [String]) -> [Weekday] {
    let sorted = symbols.enumerated().map { Weekday(id: $0 + 1, symbol: $1) }
    
    guard firstWeekday > 1 else {
      return sorted
    }
    
    let firstWeekdayIndex = firstWeekday - 1
    let last = sorted[0..<firstWeekdayIndex]
    let first = sorted[firstWeekdayIndex..<sorted.endIndex]
    return Array(first + last)
  }
}

extension Array where Element == Weekday {
  var toString: String {
    return map { String($0.id) }.joined()
  }
}

extension String {
  var toWeekdays: [Weekday] {
    let ids = compactMap({ Int(String($0)) ?? nil })
    return ids.map { Weekday(id: $0) }
  }
}

class WeekdayTransformer: NSSecureUnarchiveFromDataTransformer {
  override class var allowedTopLevelClasses: [AnyClass] {
    return [Weekday.self]
  }
  
  static let name = NSValueTransformerName(rawValue: String(describing: WeekdayTransformer.self))
  
  public static func register() {
    let transformer = WeekdayTransformer()
    ValueTransformer.setValueTransformer(transformer, forName: name)
  }
}
